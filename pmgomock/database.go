// Code generated by MockGen. DO NOT EDIT.
// Source: /Users/luoji/gopath/src/github.com/gunsluo/pmgo/database.go

// Package pmgomock is a generated GoMock package.
package pmgomock

import (
	mgo "github.com/globalsign/mgo"
	gomock "github.com/golang/mock/gomock"
	pmgo "github.com/gunsluo/pmgo"
	reflect "reflect"
)

// MockDatabaseManager is a mock of DatabaseManager interface
type MockDatabaseManager struct {
	ctrl     *gomock.Controller
	recorder *MockDatabaseManagerMockRecorder
}

// MockDatabaseManagerMockRecorder is the mock recorder for MockDatabaseManager
type MockDatabaseManagerMockRecorder struct {
	mock *MockDatabaseManager
}

// NewMockDatabaseManager creates a new mock instance
func NewMockDatabaseManager(ctrl *gomock.Controller) *MockDatabaseManager {
	mock := &MockDatabaseManager{ctrl: ctrl}
	mock.recorder = &MockDatabaseManagerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockDatabaseManager) EXPECT() *MockDatabaseManagerMockRecorder {
	return m.recorder
}

// AddUser mocks base method
func (m *MockDatabaseManager) AddUser(username, password string, readOnly bool) error {
	ret := m.ctrl.Call(m, "AddUser", username, password, readOnly)
	ret0, _ := ret[0].(error)
	return ret0
}

// AddUser indicates an expected call of AddUser
func (mr *MockDatabaseManagerMockRecorder) AddUser(username, password, readOnly interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddUser", reflect.TypeOf((*MockDatabaseManager)(nil).AddUser), username, password, readOnly)
}

// C mocks base method
func (m *MockDatabaseManager) C(name string) pmgo.CollectionManager {
	ret := m.ctrl.Call(m, "C", name)
	ret0, _ := ret[0].(pmgo.CollectionManager)
	return ret0
}

// C indicates an expected call of C
func (mr *MockDatabaseManagerMockRecorder) C(name interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "C", reflect.TypeOf((*MockDatabaseManager)(nil).C), name)
}

// CollectionNames mocks base method
func (m *MockDatabaseManager) CollectionNames() ([]string, error) {
	ret := m.ctrl.Call(m, "CollectionNames")
	ret0, _ := ret[0].([]string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CollectionNames indicates an expected call of CollectionNames
func (mr *MockDatabaseManagerMockRecorder) CollectionNames() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CollectionNames", reflect.TypeOf((*MockDatabaseManager)(nil).CollectionNames))
}

// CreateView mocks base method
func (m *MockDatabaseManager) CreateView(view, source string, pipeline interface{}, collation *mgo.Collation) error {
	ret := m.ctrl.Call(m, "CreateView", view, source, pipeline, collation)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateView indicates an expected call of CreateView
func (mr *MockDatabaseManagerMockRecorder) CreateView(view, source, pipeline, collation interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateView", reflect.TypeOf((*MockDatabaseManager)(nil).CreateView), view, source, pipeline, collation)
}

// DropDatabase mocks base method
func (m *MockDatabaseManager) DropDatabase() error {
	ret := m.ctrl.Call(m, "DropDatabase")
	ret0, _ := ret[0].(error)
	return ret0
}

// DropDatabase indicates an expected call of DropDatabase
func (mr *MockDatabaseManagerMockRecorder) DropDatabase() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DropDatabase", reflect.TypeOf((*MockDatabaseManager)(nil).DropDatabase))
}

// FindRef mocks base method
func (m *MockDatabaseManager) FindRef(ref *mgo.DBRef) *mgo.Query {
	ret := m.ctrl.Call(m, "FindRef", ref)
	ret0, _ := ret[0].(*mgo.Query)
	return ret0
}

// FindRef indicates an expected call of FindRef
func (mr *MockDatabaseManagerMockRecorder) FindRef(ref interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindRef", reflect.TypeOf((*MockDatabaseManager)(nil).FindRef), ref)
}

// GridFS mocks base method
func (m *MockDatabaseManager) GridFS(prefix string) *mgo.GridFS {
	ret := m.ctrl.Call(m, "GridFS", prefix)
	ret0, _ := ret[0].(*mgo.GridFS)
	return ret0
}

// GridFS indicates an expected call of GridFS
func (mr *MockDatabaseManagerMockRecorder) GridFS(prefix interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GridFS", reflect.TypeOf((*MockDatabaseManager)(nil).GridFS), prefix)
}

// Login mocks base method
func (m *MockDatabaseManager) Login(user, pass string) error {
	ret := m.ctrl.Call(m, "Login", user, pass)
	ret0, _ := ret[0].(error)
	return ret0
}

// Login indicates an expected call of Login
func (mr *MockDatabaseManagerMockRecorder) Login(user, pass interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Login", reflect.TypeOf((*MockDatabaseManager)(nil).Login), user, pass)
}

// Logout mocks base method
func (m *MockDatabaseManager) Logout() {
	m.ctrl.Call(m, "Logout")
}

// Logout indicates an expected call of Logout
func (mr *MockDatabaseManagerMockRecorder) Logout() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Logout", reflect.TypeOf((*MockDatabaseManager)(nil).Logout))
}

// RemoveUser mocks base method
func (m *MockDatabaseManager) RemoveUser(user string) error {
	ret := m.ctrl.Call(m, "RemoveUser", user)
	ret0, _ := ret[0].(error)
	return ret0
}

// RemoveUser indicates an expected call of RemoveUser
func (mr *MockDatabaseManagerMockRecorder) RemoveUser(user interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemoveUser", reflect.TypeOf((*MockDatabaseManager)(nil).RemoveUser), user)
}

// Run mocks base method
func (m *MockDatabaseManager) Run(cmd, result interface{}) error {
	ret := m.ctrl.Call(m, "Run", cmd, result)
	ret0, _ := ret[0].(error)
	return ret0
}

// Run indicates an expected call of Run
func (mr *MockDatabaseManagerMockRecorder) Run(cmd, result interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Run", reflect.TypeOf((*MockDatabaseManager)(nil).Run), cmd, result)
}

// UpsertUser mocks base method
func (m *MockDatabaseManager) UpsertUser(user *mgo.User) error {
	ret := m.ctrl.Call(m, "UpsertUser", user)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpsertUser indicates an expected call of UpsertUser
func (mr *MockDatabaseManagerMockRecorder) UpsertUser(user interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpsertUser", reflect.TypeOf((*MockDatabaseManager)(nil).UpsertUser), user)
}

// With mocks base method
func (m *MockDatabaseManager) With(s pmgo.SessionManager) pmgo.DatabaseManager {
	ret := m.ctrl.Call(m, "With", s)
	ret0, _ := ret[0].(pmgo.DatabaseManager)
	return ret0
}

// With indicates an expected call of With
func (mr *MockDatabaseManagerMockRecorder) With(s interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "With", reflect.TypeOf((*MockDatabaseManager)(nil).With), s)
}
